@page "/Profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject IMalfunctionData malfunctionData
@inject IUserData userData
@inject NavigationManager navManager


<h1 class="page-heading text-uppercase mb-4">My Profile</h1>

<div class="row">
    <div class="col-12 close-button-section">
        <button class="btn btn-close btn-close-white mb-2" @onclick="ClosePage"></button>
    </div>
</div>

<div class="form-layout mb-3">
    <h2 class="my-malfunction-heading">My Account</h2>
    <p class="my-malfunction-text">
        <a href="MicrosoftIdentity/Account/EditProfile">
            Edit my profile
        </a>
    </p>
</div>

@if(acknowledged?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-malfunction-heading">Acknowledged Malfunctions</h2>
        <p class="my-malfunction-text">These are malfunctions that are in queue for repairment.</p>

        @foreach (var m in acknowledged)
        {
            <hr class="my-malfunction-separator" />
            <div class="fw-bold malfunction-detail-malfunction">
                @m.Malfunction
            </div>
            <p class="my-malfunction-text">
                @m.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-malfunction-text">
                @m.Priority.PriorityName
            </p>
            <p class="my-malfunction-text">
                @m.Category.CategoryName
            </p>
            <p class="my-malfunction-text">
                @m.Description
            </p>
            @if (m.MalfunctionStatus is not null)
            {
                <div class="fw-bold malfunction-detail-malfunction">
                    @m.MalfunctionStatus.StatusName
                </div>
                <p class="my-malfunction-text">
                    @((MarkupString)m.MaintenanceNotes)
                </p>
            }
        }
    </div>
}

@if (archived?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-malfunction-heading">Archived Malfunctions</h2>
        <p class="my-malfunction-text">These are malfunctions that are archived.</p>

        @foreach (var m in archived)
        {
            <hr class="my-malfunction-separator" />
            <div class="fw-bold malfunction-detail-malfunction">
                @m.Malfunction
            </div>
            <p class="my-malfunction-text">
                @m.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-malfunction-text">
                @m.Priority.PriorityName
            </p>
            <p class="my-malfunction-text">
                @m.Category.CategoryName
            </p>
            <p class="my-malfunction-text">
                @m.Description
            </p>
            @if (m.MalfunctionStatus is not null)
            {
                <div class="fw-bold malfunction-detail-malfunction">
                    @m.MalfunctionStatus.StatusName
                </div>
                <p class="my-malfunction-text">
                    @((MarkupString)m.MaintenanceNotes)
                </p>
            }
        }
    </div>
}

@if (pending?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-malfunction-heading">Pending Malfunctions</h2>
        <p class="my-malfunction-text">These are malfunctions that are pending acknowledgment.</p>

        @foreach (var m in pending)
        {
            <hr class="my-malfunction-separator" />
            <div class="fw-bold malfunction-detail-malfunction">
                @m.Malfunction
            </div>
            <p class="my-malfunction-text">
                @m.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-malfunction-text">
                @m.Priority.PriorityName
            </p>
            <p class="my-malfunction-text">
                @m.Category.CategoryName
            </p>
            <p class="my-malfunction-text">
                @m.Description
            </p>
            @if (m.MalfunctionStatus is not null)
            {
                <div class="fw-bold malfunction-detail-malfunction">
                    @m.MalfunctionStatus.StatusName
                </div>
                <p class="my-malfunction-text">
                    @((MarkupString)m.MaintenanceNotes)
                </p>
            }
        }
    </div>
}

@if (rejected?.Count > 0)
{
    <div class ="form-layout mb-3">
        <h2 class="my-malfunction-heading">Rejected Malfunctions</h2>
        <p class="my-malfunction-text">These are malfunctions that are rejected by maintenance.</p>

        @foreach (var m in rejected)
        {
            <hr class="my-malfunction-separator" />
            <div class="fw-bold malfunction-detail-malfunction">
                @m.Malfunction
            </div>
            <p class="my-malfunction-text">
                @m.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-malfunction-text">
                @m.Priority.PriorityName
            </p>
            <p class="my-malfunction-text">
                @m.Category.CategoryName
            </p>
            <p class="my-malfunction-text">
                @m.Description
            </p>
            @if (m.MalfunctionStatus is not null)
            {
                <div class="fw-bold malfunction-detail-malfunction">
                    @m.MalfunctionStatus.StatusName
                </div>
                <p class="my-malfunction-text">
                    @((MarkupString)m.MaintenanceNotes)
                </p>
            }
        }
    </div>
}

@code {
    private UserModel loggedInUser;
    private List<MalfunctionModel> submissions;
    private List<MalfunctionModel> acknowledged;
    private List<MalfunctionModel> archived;
    private List<MalfunctionModel> pending;
    private List<MalfunctionModel> rejected;

    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        var result = await malfunctionData.GetUsersMalfunctions(loggedInUser.Id);

        if(loggedInUser is not null && result is not null)
        {
            submissions = result.OrderByDescending(s => s.DateCreated).ToList();
            acknowledged = submissions.Where(s => s.Acknowledged && s.Archived == false && s.Rejected == false).ToList();
            archived = submissions.Where(s => s.Archived && s.Rejected == false).ToList();
            pending = submissions.Where(s => s.Acknowledged == false && s.Rejected == false).ToList();
            rejected = submissions.Where(s => s.Rejected).ToList();
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
