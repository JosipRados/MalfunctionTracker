@page "/AdminApproval"
@attribute [Authorize(Policy = "Admin")]
@inject IMalfunctionData malfunctionData
@inject IUserData userData
@inject NavigationManager navManager

<h1>Pending Malfunctions</h1>

<div>
    <div>@submissions?.Count Submissions</div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>

@if(submissions is not null)
{
    foreach(var s in submissions)
    {
        <div>
            <div>
                <button @onclick="(() => ApproveSubmission(s))">Approve</button>
                <button @onclick="(() => RejectSubmission(s))">Reject</button>
            </div>
            <div>
                <div>
                    @if (currentEditingTitle == s.Id)
                    {
                        <EditForm Model="@editedTitle" OnSubmit="(() => SaveTitle(s))">
                            <InputText @bind-Value="editedTitle" />
                            <button type="submit">
                                <span class="oi oi-check"></span>
                            </button>
                            <button @onclick="(() => currentEditingTitle = string.Empty)">
                                <span class="oi oi-x"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Malfunction
                        <span class="oi oi-pencil" @onclick="(() => EditTitle(s))"></span>
                    }
                </div>
                <div>
                    @s.Category.CategoryName
                </div>
                <div>
                    @s.User.DisplayName
                </div>
                <div>
                    @if(currentEditingDescription == s.Id)
                    {
                        <EditForm Model ="@editedDescription" OnSubmit="(() => SaveDescription(s))">
                            <InputText @bind-Value="editedDescription" />
                            <button type="submit">
                                <span class="oi oi-check"></span>
                            </button>
                            <button type="submit">
                                <span class="oi oi-x"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Description
                        <span class="oi oi-pencil" @onclick="(() => EditDescription(s))"></span>
                    }
                </div>
            </div>
        </div>
    }
}



@code {
    private List<MalfunctionModel> submissions;
    private MalfunctionModel editingModel;
    private string currentEditingTitle = "";
    private string editedTitle = "";
    private string currentEditingDescription = "";
    private string editedDescription = "";

    protected async override Task OnInitializedAsync()
    {
        submissions = await malfunctionData.GetAllMalfunctionsWaitingAcknowledgement();
    }

    private async Task ApproveSubmission(MalfunctionModel submission)
    {
        submission.Acknowledged = true;
        submissions.Remove(submission);
        await malfunctionData.UpdateMalfunction(submission);
    }

    private async Task RejectSubmission(MalfunctionModel submission)
    {
        submission.Rejected = true;
        submissions.Remove(submission);
        await malfunctionData.UpdateMalfunction(submission);
    }

    private void EditTitle(MalfunctionModel model)
    {
        editingModel = model;
        editedTitle = model.Malfunction;
        currentEditingTitle = model.Id;
        currentEditingDescription = "";
    }

    private async Task SaveTitle(MalfunctionModel model)
    {
        currentEditingTitle = string.Empty;
        model.Malfunction = editedTitle;
        await malfunctionData.UpdateMalfunction(model);
    }

    private void EditDescription(MalfunctionModel model)
    {
        editingModel = model;
        editedDescription = model.Description;
        currentEditingTitle = "";
        currentEditingDescription = model.Id;
    }

    private async Task SaveDescription(MalfunctionModel model)
    {
        currentEditingDescription = string.Empty;
        model.Description = editedDescription;
        await malfunctionData.UpdateMalfunction(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
