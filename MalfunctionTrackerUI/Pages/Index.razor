@page "/"
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IMalfunctionData malfunctionData
@inject IUserData userData
@inject IPriorityData priorityData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1>Malfunctions</h1>
<div>
    <button>Report malfunction</button>
</div>

<div>
    <div >@malfunctions?.Count Malfunctions</div>
    <div>
        <button @onclick="(() => OrderByNew(true))">Newer</button>
        <button @onclick="(() => OrderByNew(false))">Older</button>
    </div>
    <div>
        <input type="text" placeholder="Search" 
            aria-label="Search box"lab 
            @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
</div>

<div>
    <div>
        @if (malfunctions is not null)
        {
            <Virtualize Items="@malfunctions" Context="m" OverscanCount="10">
                <div>
                    <div>
                        <div>@m.Priority?.PriorityName</div>
                    </div>
                    <div>
                        <div @onclick="(() => OpenDetails(m))">@m.Malfunction</div>
                        <div>
                            <div @onclick="(() => OpenDetails(m))">@m.Category?.CategoryName</div>
                        </div>
                    </div>
                    <div>
                        <div>
                            @m.MalfunctionStatus?.StatusName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>

    <div>
        @if(categories is not null)
        {
            <div>
                <span>Category</span>
                <div @onclick="(() => OnCategoryClick())">All</div>
                @foreach(var c in categories)
                {
                    <div @onclick="(() => OnCategoryClick(c.CategoryName))">@c.CategoryName</div>
                }
            </div>
        }
        @if(statuses is not null)
        {
            <div>
                <span>Status</span>
                <div @onclick="(() => OnStatusClick())">All</div>
            @foreach (var s in statuses)
            {
                        <div @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>
            }
            </div>
        }
        @if (priorities is not null)
        {
            <div>
                <span>Priority</span>
                <div @onclick="(() => OnPriorityClick())">All</div>
                @foreach (var p in priorities)
                {
                    <div @onclick="(() => OnPriorityClick(p.PriorityName))">@p.PriorityName</div>
                }
            </div>
        }
    </div>
</div>







@code {
    private List<MalfunctionModel> malfunctions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;
    private List<PriorityModel> priorities;
    private UserModel loggedInUser;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string selectedPriority = "All";
    private string searchString = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
        priorities = await priorityData.GetAllPriorities();
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if(string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();
            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            bool isDirty = false;
            if(objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            if(firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if(lastName.Equals(loggedInUser.LastName) == false)
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }
            if(displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }

            if(isDirty)
            {
                if(string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadFilterState();
            await FilterMalfunctions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedPriority));
        selectedPriority = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchString));
        searchString = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchString), searchString);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
        await sessionStorage.SetAsync(nameof(selectedPriority), selectedPriority);
    }

    private async Task FilterMalfunctions()
    {
        var output = await malfunctionData.GetAllAcknowledgedMalfunctions();

        if(selectedCategory != "All")
        {
            output = output.Where(m => m.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(m => m.MalfunctionStatus?.StatusName == selectedStatus).ToList();
        }

        if (selectedPriority != "All")
        {
            output = output.Where(m => m.Priority?.PriorityName == selectedPriority).ToList();
        }

        if(string.IsNullOrWhiteSpace(searchString) == false)
        {
            output = output.Where(m =>
                m.Malfunction.Contains(searchString, StringComparison.InvariantCultureIgnoreCase) ||
                m.Description.Contains(searchString, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if(isSortedByNew)
        {
            output = output.OrderByDescending(m => m.DateCreated).ToList();
        }
        else
        {
            output = output.OrderBy(m => m.DateCreated).ToList();
        }

        malfunctions = output;

        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterMalfunctions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchString = searchInput;
        await FilterMalfunctions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterMalfunctions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterMalfunctions();
    }

    private async Task OnPriorityClick(string priority = "All")
    {
        selectedPriority = priority;
        await FilterMalfunctions();
    }

    private void OpenDetails(MalfunctionModel malfunction)
    {
        navManager.NavigateTo($"/Details/{malfunction.Id}");
    }
}

